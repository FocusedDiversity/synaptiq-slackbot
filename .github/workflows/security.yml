name: Security Scan

on:
  schedule:
    # Run at 9 AM UTC every Monday
    - cron: '0 9 * * 1'
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  GO_VERSION: '1.21'

permissions:
  contents: read
  security-events: write

jobs:
  dependency-check:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run Nancy
        continue-on-error: true
        run: |
          go install github.com/sonatype-nexus-community/nancy@latest
          go list -json -deps ./... | nancy sleuth

      - name: Run go-licenses
        continue-on-error: true
        run: |
          go install github.com/google/go-licenses@latest
          go-licenses check ./... --disallowed_types=forbidden,restricted

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@v1
        with:
          project: 'standup-bot'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental

      - name: Upload OWASP results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-check-report
          path: reports/

  code-security:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run gosec
        uses: securego/gosec@v2.21.4
        with:
          args: '-fmt sarif -out gosec.sarif -severity medium ./...'

      - name: Upload gosec SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: gosec.sarif

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck -json ./... > govulncheck.json || true

      - name: Parse govulncheck results
        if: always()
        run: |
          if [ -f govulncheck.json ]; then
            echo "### Go Vulnerability Check Results" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            cat govulncheck.json | jq . >> $GITHUB_STEP_SUMMARY || cat govulncheck.json >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy scanner - Filesystem
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs.sarif'

      - name: Run Trivy scanner - Config
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

  iac-security:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          quiet: true
          soft_fail: true
          framework: cloudformation,github_actions,dockerfile
          output_format: sarif
          output_file_path: checkov.sarif

      - name: Upload Checkov SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov.sarif

      - name: Run tfsec on SAM templates
        uses: aquasecurity/tfsec-sarif-action@v0.1.4
        with:
          sarif_file: tfsec.sarif

      - name: Upload tfsec SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: tfsec.sarif

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@v3
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:go"

  security-report:
    name: Security Report
    needs: [dependency-check, code-security, container-security, iac-security, secret-scanning, codeql]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Create security summary
        run: |
          echo "# Security Scan Summary - $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check job statuses
          echo "## Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY

          # Add status for each job
          declare -A jobs=(
            ["dependency-check"]="Dependency Security"
            ["code-security"]="Code Security"
            ["container-security"]="Container Security"
            ["iac-security"]="Infrastructure Security"
            ["secret-scanning"]="Secret Scanning"
            ["codeql"]="CodeQL Analysis"
          )

          for job in "${!jobs[@]}"; do
            status="${{ needs[job].result }}"
            if [ "$status" == "success" ]; then
              echo "| ${jobs[$job]} | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
            elif [ "$status" == "failure" ]; then
              echo "| ${jobs[$job]} | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| ${jobs[$job]} | ⚠️ $status |" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Full reports are available in the workflow artifacts and Security tab." >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: failure() && github.event_name != 'pull_request'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "⚠️ Security scan found issues in ${{ github.repository }}"
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
